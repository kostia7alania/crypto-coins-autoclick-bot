/// <reference types="vitest" />
import fs from 'fs';
import { fileURLToPath, URL } from 'node:url';
import vue from '@vitejs/plugin-vue';
import { capitalCase } from 'change-case';
import { defineConfig, loadEnv, type UserConfig } from 'vite';

import intro from './intro.txt?raw';
import pkg from './package.json';
import { getMatchesFromMap } from './src/hostMap';

// import dts from 'vite-plugin-dts';

console.log('-intro-', typeof intro);

const pathResolve = (path: string) => fileURLToPath(new URL(path, import.meta.url));

export default defineConfig(async ({ command, mode }): Promise<UserConfig> => {
  console.log('[vite.config]', { command, mode });

  const isWatch = mode === 'watch';
  const env = loadEnv(mode, process.cwd(), '');

  return {
    define: {
      'process.env': env,
    },
    build: {
      minify: false,
      copyPublicDir: false,
      // emptyOutDir: false, // to retain the types folder generated by tsc
      // sourcemap: true,
      assetsInlineLimit: 1_000_000,
      cssCodeSplit: false,
      target: 'esnext', // Reduce bloat from legacy polyfills.

      lib: {
        name: 'crypto-auto-click-bot',
        formats: ['es'],
        // fileName: (format) => `mithril.${format}.mjs`,
        entry: {
          index: pathResolve('./src/index.ts'),
        },
      },
      rollupOptions: {
        // external: [...Object.keys(pkg.peerDependencies)],
        treeshake: false,
        output: {
          // exports: 'named',
          // intro: `${intro};`,
          globals: {
            vue: 'Vue',
          },
          // chunkFileNames: 'chunk/[name]/[hash].js',
          // assetFileNames: 'asset/[name]/[hash][extname]',
          entryFileNames: `${isWatch ? 'dev' : '[name]'}.user.js`,
        },
      },
    },
    plugins: [
      vue({}),
      // https://github.com/qmhc/vite-plugin-dts
      // dts({
      //   entryRoot: './src',
      //   // cleanVueFileName: true,
      //   // insertTypesEntry: true, // adds dist/index.d.ts
      //   include: ['./src/vite-env.d.ts', '*/types.d.ts', './src/index.ts'],
      //   // exclude: ["./src/plugins"],
      //   outDir: './dist',
      //   // TO-DO: Vite should use `tsconfig.build.json` as well when it supports configuring
      //   // See: https://github.com/vitejs/vite/discussions/8483
      //   // tsconfigPath: 'tsconfig.build.json',
      //   // include: 'src',
      //   // rollupTypes: true,
      // }),
      {
        name: 'add-intro-comments',
        apply: 'build',

        writeBundle(option, bundle) {
          const [[key]] = Object.entries(bundle);

          const filePath = pathResolve(`./dist/${key}`);

          const data = fs.readFileSync(filePath, { encoding: 'utf8' });
          const introReplaced = intro
            .replace('__VERSION_FROM_PACKAGE_JSON__', `${pkg.version}${isWatch ? Math.random() : ''}`)
            .replace('__APP_URL_MATCHES__', getMatchesFromMap)
            .replace('__APP_NAME__', `${capitalCase(pkg.name)} ${isWatch ? '[dev]' : ''}`)
            .replace('__HOMEPAGE__', pkg.homepage)
            .replace(/__UPDATE_URL__/g, isWatch ? `file://${filePath}` : pkg.updateURL)

            .replace('__LAST_RELEASE__', new Date().toLocaleString('ru'));

          fs.writeFileSync(filePath, `${introReplaced}\n${data}`);
        },
      },
    ],
    resolve: { alias: { '@': pathResolve('./src') } },
    optimizeDeps: {
      include: ['vue', '@vueuse/core'],
      exclude: ['vue-demi'],
    },
  };
});
